/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HTTPResult {
    HTTPRES_OK = 0,
    HTTPRES_OK_NOT_MODIFIED = 1,
    HTTPRES_NOT_FOUND = 2,
    HTTPRES_BAD_REQUEST = 3,
    HTTPRES_SERVER_ERROR = 4,
    HTTPRES_REDIRECTED = 5,
    HTTPRES_LOST_CONNECTION = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct HTTP_ctx {
    pub date: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for HTTP_ctx {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HTTP_read_callback =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void,
                                               size: size_t, nmemb: size_t,
                                               stream:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_ulong>;
extern "C" {
    pub fn HTTP_get(http: *mut HTTP_ctx, url: *const ::std::os::raw::c_char,
                    cb: HTTP_read_callback) -> HTTPResult;
}
