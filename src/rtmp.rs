/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum AMFDataType {
    AMF_NUMBER = 0,
    AMF_BOOLEAN = 1,
    AMF_STRING = 2,
    AMF_OBJECT = 3,
    AMF_MOVIECLIP = 4,
    AMF_NULL = 5,
    AMF_UNDEFINED = 6,
    AMF_REFERENCE = 7,
    AMF_ECMA_ARRAY = 8,
    AMF_OBJECT_END = 9,
    AMF_STRICT_ARRAY = 10,
    AMF_DATE = 11,
    AMF_LONG_STRING = 12,
    AMF_UNSUPPORTED = 13,
    AMF_RECORDSET = 14,
    AMF_XML_DOC = 15,
    AMF_TYPED_OBJECT = 16,
    AMF_AVMPLUS = 17,
    AMF_INVALID = 255,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum AMF3DataType {
    AMF3_UNDEFINED = 0,
    AMF3_NULL = 1,
    AMF3_FALSE = 2,
    AMF3_TRUE = 3,
    AMF3_INTEGER = 4,
    AMF3_DOUBLE = 5,
    AMF3_STRING = 6,
    AMF3_XML_DOC = 7,
    AMF3_DATE = 8,
    AMF3_ARRAY = 9,
    AMF3_OBJECT = 10,
    AMF3_XML = 11,
    AMF3_BYTE_ARRAY = 12,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct AVal {
    pub av_val: *mut ::std::os::raw::c_char,
    pub av_len: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for AVal {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct AMFObject {
    pub o_num: ::std::os::raw::c_int,
    pub o_props: *mut AMFObjectProperty,
}
impl ::std::default::Default for AMFObject {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct AMFObjectProperty {
    pub p_name: AVal,
    pub p_type: AMFDataType,
    pub p_vu: Union_Unnamed1,
    pub p_UTCoffset: int16_t,
    _bindgen_padding_0_: [u8; 6usize],
}
impl ::std::default::Default for AMFObjectProperty {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed1 {
    pub unsafe fn p_number(&mut self) -> *mut f64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn p_aval(&mut self) -> *mut AVal {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn p_object(&mut self) -> *mut AMFObject {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct AMF3ClassDef {
    pub cd_name: AVal,
    pub cd_externalizable: ::std::os::raw::c_char,
    pub cd_dynamic: ::std::os::raw::c_char,
    pub cd_num: ::std::os::raw::c_int,
    pub cd_props: *mut AVal,
}
impl ::std::default::Default for AMF3ClassDef {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RTMPChunk {
    pub c_headerSize: ::std::os::raw::c_int,
    pub c_chunkSize: ::std::os::raw::c_int,
    pub c_chunk: *mut ::std::os::raw::c_char,
    pub c_header: [::std::os::raw::c_char; 18usize],
}
impl ::std::default::Default for RTMPChunk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RTMPPacket {
    pub m_headerType: uint8_t,
    pub m_packetType: uint8_t,
    pub m_hasAbsTimestamp: uint8_t,
    pub m_nChannel: ::std::os::raw::c_int,
    pub m_nTimeStamp: uint32_t,
    pub m_nInfoField2: int32_t,
    pub m_nBodySize: uint32_t,
    pub m_nBytesRead: uint32_t,
    pub m_chunk: *mut RTMPChunk,
    pub m_body: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for RTMPPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct RTMPSockBuf {
    pub sb_socket: ::std::os::raw::c_int,
    pub sb_size: ::std::os::raw::c_int,
    pub sb_start: *mut ::std::os::raw::c_char,
    pub sb_buf: [::std::os::raw::c_char; 16384usize],
    pub sb_timedout: ::std::os::raw::c_int,
    pub sb_ssl: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for RTMPSockBuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for RTMPSockBuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct RTMP_LNK {
    pub hostname: AVal,
    pub sockshost: AVal,
    pub playpath0: AVal,
    pub playpath: AVal,
    pub tcUrl: AVal,
    pub swfUrl: AVal,
    pub pageUrl: AVal,
    pub app: AVal,
    pub auth: AVal,
    pub flashVer: AVal,
    pub subscribepath: AVal,
    pub usherToken: AVal,
    pub token: AVal,
    pub pubUser: AVal,
    pub pubPasswd: AVal,
    pub extras: AMFObject,
    pub edepth: ::std::os::raw::c_int,
    pub seekTime: ::std::os::raw::c_int,
    pub stopTime: ::std::os::raw::c_int,
    pub lFlags: ::std::os::raw::c_int,
    pub swfAge: ::std::os::raw::c_int,
    pub protocol: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_int,
    pub pFlags: ::std::os::raw::c_int,
    pub socksport: ::std::os::raw::c_ushort,
    pub port: ::std::os::raw::c_ushort,
    pub dh: *mut ::std::os::raw::c_void,
    pub rc4keyIn: *mut ::std::os::raw::c_void,
    pub rc4keyOut: *mut ::std::os::raw::c_void,
    pub SWFSize: uint32_t,
    pub SWFHash: [uint8_t; 32usize],
    pub SWFVerificationResponse: [::std::os::raw::c_char; 42usize],
}
impl ::std::clone::Clone for RTMP_LNK {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for RTMP_LNK {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RTMP_READ {
    pub buf: *mut ::std::os::raw::c_char,
    pub bufpos: *mut ::std::os::raw::c_char,
    pub buflen: ::std::os::raw::c_uint,
    pub timestamp: uint32_t,
    pub dataType: uint8_t,
    pub flags: uint8_t,
    pub status: int8_t,
    pub initialFrameType: uint8_t,
    pub nResumeTS: uint32_t,
    pub metaHeader: *mut ::std::os::raw::c_char,
    pub initialFrame: *mut ::std::os::raw::c_char,
    pub nMetaHeaderSize: uint32_t,
    pub nInitialFrameSize: uint32_t,
    pub nIgnoredFrameCounter: uint32_t,
    pub nIgnoredFlvFrameCounter: uint32_t,
}
impl ::std::default::Default for RTMP_READ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct RTMP_METHOD {
    pub name: AVal,
    pub num: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for RTMP_METHOD {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
//#[derive(Debug)]
pub struct RTMP {
    pub m_inChunkSize: ::std::os::raw::c_int,
    pub m_outChunkSize: ::std::os::raw::c_int,
    pub m_nBWCheckCounter: ::std::os::raw::c_int,
    pub m_nBytesIn: ::std::os::raw::c_int,
    pub m_nBytesInSent: ::std::os::raw::c_int,
    pub m_nBufferMS: ::std::os::raw::c_int,
    pub m_stream_id: ::std::os::raw::c_int,
    pub m_mediaChannel: ::std::os::raw::c_int,
    pub m_mediaStamp: uint32_t,
    pub m_pauseStamp: uint32_t,
    pub m_pausing: ::std::os::raw::c_int,
    pub m_nServerBW: ::std::os::raw::c_int,
    pub m_nClientBW: ::std::os::raw::c_int,
    pub m_nClientBW2: uint8_t,
    pub m_bPlaying: uint8_t,
    pub m_bSendEncoding: uint8_t,
    pub m_bSendCounter: uint8_t,
    pub m_numInvokes: ::std::os::raw::c_int,
    pub m_numCalls: ::std::os::raw::c_int,
    pub m_methodCalls: *mut RTMP_METHOD,
    pub m_channelsAllocatedIn: ::std::os::raw::c_int,
    pub m_channelsAllocatedOut: ::std::os::raw::c_int,
    pub m_vecChannelsIn: *mut *mut RTMPPacket,
    pub m_vecChannelsOut: *mut *mut RTMPPacket,
    pub m_channelTimestamp: *mut ::std::os::raw::c_int,
    pub m_fAudioCodecs: f64,
    pub m_fVideoCodecs: f64,
    pub m_fEncoding: f64,
    pub m_fDuration: f64,
    pub m_msgCounter: ::std::os::raw::c_int,
    pub m_polling: ::std::os::raw::c_int,
    pub m_resplen: ::std::os::raw::c_int,
    pub m_unackd: ::std::os::raw::c_int,
    pub m_clientID: AVal,
    pub m_read: RTMP_READ,
    pub m_write: RTMPPacket,
    pub m_sb: RTMPSockBuf,
    pub Link: RTMP_LNK,
}
impl ::std::default::Default for RTMP {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum sockaddr { }
extern "C" {
    pub static mut RTMPProtocolStringsLower:
               [[::std::os::raw::c_char; 7usize]; 0usize];
    pub static RTMP_DefaultFlashVer: AVal;
    pub static mut RTMP_ctrlC: ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
    pub fn AMF_EncodeString(output: *mut ::std::os::raw::c_char,
                            outend: *mut ::std::os::raw::c_char,
                            str: *const AVal) -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeNumber(output: *mut ::std::os::raw::c_char,
                            outend: *mut ::std::os::raw::c_char, dVal: f64)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeInt16(output: *mut ::std::os::raw::c_char,
                           outend: *mut ::std::os::raw::c_char,
                           nVal: ::std::os::raw::c_short)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeInt24(output: *mut ::std::os::raw::c_char,
                           outend: *mut ::std::os::raw::c_char,
                           nVal: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeInt32(output: *mut ::std::os::raw::c_char,
                           outend: *mut ::std::os::raw::c_char,
                           nVal: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeBoolean(output: *mut ::std::os::raw::c_char,
                             outend: *mut ::std::os::raw::c_char,
                             bVal: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeNamedString(output: *mut ::std::os::raw::c_char,
                                 outend: *mut ::std::os::raw::c_char,
                                 name: *const AVal, value: *const AVal)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeNamedNumber(output: *mut ::std::os::raw::c_char,
                                 outend: *mut ::std::os::raw::c_char,
                                 name: *const AVal, dVal: f64)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeNamedBoolean(output: *mut ::std::os::raw::c_char,
                                  outend: *mut ::std::os::raw::c_char,
                                  name: *const AVal,
                                  bVal: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_DecodeInt16(data: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ushort;
    pub fn AMF_DecodeInt24(data: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_uint;
    pub fn AMF_DecodeInt32(data: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_uint;
    pub fn AMF_DecodeString(data: *const ::std::os::raw::c_char,
                            str: *mut AVal);
    pub fn AMF_DecodeLongString(data: *const ::std::os::raw::c_char,
                                str: *mut AVal);
    pub fn AMF_DecodeBoolean(data: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn AMF_DecodeNumber(data: *const ::std::os::raw::c_char) -> f64;
    pub fn AMF_Encode(obj: *mut AMFObject,
                      pBuffer: *mut ::std::os::raw::c_char,
                      pBufEnd: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeEcmaArray(obj: *mut AMFObject,
                               pBuffer: *mut ::std::os::raw::c_char,
                               pBufEnd: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_EncodeArray(obj: *mut AMFObject,
                           pBuffer: *mut ::std::os::raw::c_char,
                           pBufEnd: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF_Decode(obj: *mut AMFObject,
                      pBuffer: *const ::std::os::raw::c_char,
                      nSize: ::std::os::raw::c_int,
                      bDecodeName: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn AMF_DecodeArray(obj: *mut AMFObject,
                           pBuffer: *const ::std::os::raw::c_char,
                           nSize: ::std::os::raw::c_int,
                           nArrayLen: ::std::os::raw::c_int,
                           bDecodeName: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn AMF3_Decode(obj: *mut AMFObject,
                       pBuffer: *const ::std::os::raw::c_char,
                       nSize: ::std::os::raw::c_int,
                       bDecodeName: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn AMF_Dump(obj: *mut AMFObject);
    pub fn AMF_Reset(obj: *mut AMFObject);
    pub fn AMF_AddProp(obj: *mut AMFObject, prop: *const AMFObjectProperty);
    pub fn AMF_CountProp(obj: *mut AMFObject) -> ::std::os::raw::c_int;
    pub fn AMF_GetProp(obj: *mut AMFObject, name: *const AVal,
                       nIndex: ::std::os::raw::c_int)
     -> *mut AMFObjectProperty;
    pub fn AMFProp_GetType(prop: *mut AMFObjectProperty) -> AMFDataType;
    pub fn AMFProp_SetNumber(prop: *mut AMFObjectProperty, dval: f64);
    pub fn AMFProp_SetBoolean(prop: *mut AMFObjectProperty,
                              bflag: ::std::os::raw::c_int);
    pub fn AMFProp_SetString(prop: *mut AMFObjectProperty, str: *mut AVal);
    pub fn AMFProp_SetObject(prop: *mut AMFObjectProperty,
                             obj: *mut AMFObject);
    pub fn AMFProp_GetName(prop: *mut AMFObjectProperty, name: *mut AVal);
    pub fn AMFProp_SetName(prop: *mut AMFObjectProperty, name: *mut AVal);
    pub fn AMFProp_GetNumber(prop: *mut AMFObjectProperty) -> f64;
    pub fn AMFProp_GetBoolean(prop: *mut AMFObjectProperty)
     -> ::std::os::raw::c_int;
    pub fn AMFProp_GetString(prop: *mut AMFObjectProperty, str: *mut AVal);
    pub fn AMFProp_GetObject(prop: *mut AMFObjectProperty,
                             obj: *mut AMFObject);
    pub fn AMFProp_IsValid(prop: *mut AMFObjectProperty)
     -> ::std::os::raw::c_int;
    pub fn AMFProp_Encode(prop: *mut AMFObjectProperty,
                          pBuffer: *mut ::std::os::raw::c_char,
                          pBufEnd: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn AMF3Prop_Decode(prop: *mut AMFObjectProperty,
                           pBuffer: *const ::std::os::raw::c_char,
                           nSize: ::std::os::raw::c_int,
                           bDecodeName: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn AMFProp_Decode(prop: *mut AMFObjectProperty,
                          pBuffer: *const ::std::os::raw::c_char,
                          nSize: ::std::os::raw::c_int,
                          bDecodeName: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn AMFProp_Dump(prop: *mut AMFObjectProperty);
    pub fn AMFProp_Reset(prop: *mut AMFObjectProperty);
    pub fn AMF3CD_AddProp(cd: *mut AMF3ClassDef, prop: *mut AVal);
    pub fn AMF3CD_GetProp(cd: *mut AMF3ClassDef, idx: ::std::os::raw::c_int)
     -> *mut AVal;
    pub fn RTMP_GetTime() -> uint32_t;
    pub fn RTMPPacket_Reset(p: *mut RTMPPacket);
    pub fn RTMPPacket_Dump(p: *mut RTMPPacket);
    pub fn RTMPPacket_Alloc(p: *mut RTMPPacket, nSize: uint32_t)
     -> ::std::os::raw::c_int;
    pub fn RTMPPacket_Free(p: *mut RTMPPacket);
    pub fn RTMP_ParseURL(url: *const ::std::os::raw::c_char,
                         protocol: *mut ::std::os::raw::c_int,
                         host: *mut AVal, port: *mut ::std::os::raw::c_uint,
                         playpath: *mut AVal, app: *mut AVal)
     -> ::std::os::raw::c_int;
    pub fn RTMP_ParsePlaypath(in_: *mut AVal, out: *mut AVal);
    pub fn RTMP_SetBufferMS(r: *mut RTMP, size: ::std::os::raw::c_int);
    pub fn RTMP_UpdateBufferMS(r: *mut RTMP);
    pub fn RTMP_SetOpt(r: *mut RTMP, opt: *const AVal, arg: *mut AVal)
     -> ::std::os::raw::c_int;
    pub fn RTMP_SetupURL(r: *mut RTMP, url: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn RTMP_SetupStream(r: *mut RTMP, protocol: ::std::os::raw::c_int,
                            hostname: *mut AVal, port: ::std::os::raw::c_uint,
                            sockshost: *mut AVal, playpath: *mut AVal,
                            tcUrl: *mut AVal, swfUrl: *mut AVal,
                            pageUrl: *mut AVal, app: *mut AVal,
                            auth: *mut AVal, swfSHA256Hash: *mut AVal,
                            swfSize: uint32_t, flashVer: *mut AVal,
                            subscribepath: *mut AVal, usherToken: *mut AVal,
                            dStart: ::std::os::raw::c_int,
                            dStop: ::std::os::raw::c_int,
                            bLiveStream: ::std::os::raw::c_int,
                            timeout: ::std::os::raw::c_long);
    pub fn RTMP_Connect(r: *mut RTMP, cp: *mut RTMPPacket)
     -> ::std::os::raw::c_int;
    pub fn RTMP_Connect0(r: *mut RTMP, svc: *mut sockaddr)
     -> ::std::os::raw::c_int;
    pub fn RTMP_Connect1(r: *mut RTMP, cp: *mut RTMPPacket)
     -> ::std::os::raw::c_int;
    pub fn RTMP_Serve(r: *mut RTMP) -> ::std::os::raw::c_int;
    pub fn RTMP_TLS_Accept(r: *mut RTMP, ctx: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn RTMP_ReadPacket(r: *mut RTMP, packet: *mut RTMPPacket)
     -> ::std::os::raw::c_int;
    pub fn RTMP_SendPacket(r: *mut RTMP, packet: *mut RTMPPacket,
                           queue: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RTMP_SendChunk(r: *mut RTMP, chunk: *mut RTMPChunk)
     -> ::std::os::raw::c_int;
    pub fn RTMP_IsConnected(r: *mut RTMP) -> ::std::os::raw::c_int;
    pub fn RTMP_Socket(r: *mut RTMP) -> ::std::os::raw::c_int;
    pub fn RTMP_IsTimedout(r: *mut RTMP) -> ::std::os::raw::c_int;
    pub fn RTMP_GetDuration(r: *mut RTMP) -> f64;
    pub fn RTMP_ToggleStream(r: *mut RTMP) -> ::std::os::raw::c_int;
    pub fn RTMP_ConnectStream(r: *mut RTMP, seekTime: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RTMP_ReconnectStream(r: *mut RTMP, seekTime: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RTMP_DeleteStream(r: *mut RTMP);
    pub fn RTMP_GetNextMediaPacket(r: *mut RTMP, packet: *mut RTMPPacket)
     -> ::std::os::raw::c_int;
    pub fn RTMP_ClientPacket(r: *mut RTMP, packet: *mut RTMPPacket)
     -> ::std::os::raw::c_int;
    pub fn RTMP_Init(r: *mut RTMP);
    pub fn RTMP_Close(r: *mut RTMP);
    pub fn RTMP_Alloc() -> *mut RTMP;
    pub fn RTMP_Free(r: *mut RTMP);
    pub fn RTMP_EnableWrite(r: *mut RTMP);
    pub fn RTMP_TLS_AllocServerContext(cert: *const ::std::os::raw::c_char,
                                       key: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn RTMP_TLS_FreeServerContext(ctx: *mut ::std::os::raw::c_void);
    pub fn RTMP_LibVersion() -> ::std::os::raw::c_int;
    pub fn RTMP_UserInterrupt();
    pub fn RTMP_SendCtrl(r: *mut RTMP, nType: ::std::os::raw::c_short,
                         nObject: ::std::os::raw::c_uint,
                         nTime: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn RTMP_SendPause(r: *mut RTMP, DoPause: ::std::os::raw::c_int,
                          dTime: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RTMP_Pause(r: *mut RTMP, DoPause: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RTMP_FindFirstMatchingProperty(obj: *mut AMFObject,
                                          name: *const AVal,
                                          p: *mut AMFObjectProperty)
     -> ::std::os::raw::c_int;
    pub fn RTMPSockBuf_Fill(sb: *mut RTMPSockBuf) -> ::std::os::raw::c_int;
    pub fn RTMPSockBuf_Send(sb: *mut RTMPSockBuf,
                            buf: *const ::std::os::raw::c_char,
                            len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RTMPSockBuf_Close(sb: *mut RTMPSockBuf) -> ::std::os::raw::c_int;
    pub fn RTMP_SendCreateStream(r: *mut RTMP) -> ::std::os::raw::c_int;
    pub fn RTMP_SendSeek(r: *mut RTMP, dTime: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RTMP_SendServerBW(r: *mut RTMP) -> ::std::os::raw::c_int;
    pub fn RTMP_SendClientBW(r: *mut RTMP) -> ::std::os::raw::c_int;
    pub fn RTMP_DropRequest(r: *mut RTMP, i: ::std::os::raw::c_int,
                            freeit: ::std::os::raw::c_int);
    pub fn RTMP_Read(r: *mut RTMP, buf: *mut ::std::os::raw::c_char,
                     size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn RTMP_Write(r: *mut RTMP, buf: *const ::std::os::raw::c_char,
                      size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn RTMP_HashSWF(url: *const ::std::os::raw::c_char,
                        size: *mut ::std::os::raw::c_uint,
                        hash: *mut ::std::os::raw::c_uchar,
                        age: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
