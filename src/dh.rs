/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub enum __locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::default::Default for __locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: size_t)
                              -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type fpos_t = _G_fpos_t;
pub enum asn1_string_st { }
pub type ASN1_INTEGER = asn1_string_st;
pub type ASN1_ENUMERATED = asn1_string_st;
pub type ASN1_BIT_STRING = asn1_string_st;
pub type ASN1_OCTET_STRING = asn1_string_st;
pub type ASN1_PRINTABLESTRING = asn1_string_st;
pub type ASN1_T61STRING = asn1_string_st;
pub type ASN1_IA5STRING = asn1_string_st;
pub type ASN1_GENERALSTRING = asn1_string_st;
pub type ASN1_UNIVERSALSTRING = asn1_string_st;
pub type ASN1_BMPSTRING = asn1_string_st;
pub type ASN1_UTCTIME = asn1_string_st;
pub type ASN1_TIME = asn1_string_st;
pub type ASN1_GENERALIZEDTIME = asn1_string_st;
pub type ASN1_VISIBLESTRING = asn1_string_st;
pub type ASN1_UTF8STRING = asn1_string_st;
pub type ASN1_STRING = asn1_string_st;
pub type ASN1_BOOLEAN = ::std::os::raw::c_int;
pub type ASN1_NULL = ::std::os::raw::c_int;
pub enum asn1_object_st { }
pub type ASN1_OBJECT = asn1_object_st;
pub enum ASN1_ITEM_st { }
pub type ASN1_ITEM = ASN1_ITEM_st;
pub enum asn1_pctx_st { }
pub type ASN1_PCTX = asn1_pctx_st;
pub type BIGNUM = bignum_st;
pub enum bignum_ctx { }
pub type BN_CTX = bignum_ctx;
pub enum bn_blinding_st { }
pub type BN_BLINDING = bn_blinding_st;
pub type BN_MONT_CTX = bn_mont_ctx_st;
pub type BN_RECP_CTX = bn_recp_ctx_st;
pub type BN_GENCB = bn_gencb_st;
pub enum buf_mem_st { }
pub type BUF_MEM = buf_mem_st;
pub enum evp_cipher_st { }
pub type EVP_CIPHER = evp_cipher_st;
pub enum evp_cipher_ctx_st { }
pub type EVP_CIPHER_CTX = evp_cipher_ctx_st;
pub enum env_md_st { }
pub type EVP_MD = env_md_st;
pub enum env_md_ctx_st { }
pub type EVP_MD_CTX = env_md_ctx_st;
pub enum evp_pkey_st { }
pub type EVP_PKEY = evp_pkey_st;
pub enum evp_pkey_asn1_method_st { }
pub type EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;
pub enum evp_pkey_method_st { }
pub type EVP_PKEY_METHOD = evp_pkey_method_st;
pub enum evp_pkey_ctx_st { }
pub type EVP_PKEY_CTX = evp_pkey_ctx_st;
pub type DH = dh_st;
pub type DH_METHOD = dh_method;
pub enum dsa_st { }
pub type DSA = dsa_st;
pub enum dsa_method { }
pub type DSA_METHOD = dsa_method;
pub enum rsa_st { }
pub type RSA = rsa_st;
pub enum rsa_meth_st { }
pub type RSA_METHOD = rsa_meth_st;
pub enum rand_meth_st { }
pub type RAND_METHOD = rand_meth_st;
pub enum ecdh_method { }
pub type ECDH_METHOD = ecdh_method;
pub enum ecdsa_method { }
pub type ECDSA_METHOD = ecdsa_method;
pub enum x509_st { }
pub type X509 = x509_st;
pub enum X509_algor_st { }
pub type X509_ALGOR = X509_algor_st;
pub enum X509_crl_st { }
pub type X509_CRL = X509_crl_st;
pub enum x509_crl_method_st { }
pub type X509_CRL_METHOD = x509_crl_method_st;
pub enum x509_revoked_st { }
pub type X509_REVOKED = x509_revoked_st;
pub enum X509_name_st { }
pub type X509_NAME = X509_name_st;
pub enum X509_pubkey_st { }
pub type X509_PUBKEY = X509_pubkey_st;
pub enum x509_store_st { }
pub type X509_STORE = x509_store_st;
pub enum x509_store_ctx_st { }
pub type X509_STORE_CTX = x509_store_ctx_st;
pub enum pkcs8_priv_key_info_st { }
pub type PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;
pub enum v3_ext_ctx { }
pub type X509V3_CTX = v3_ext_ctx;
pub enum conf_st { }
pub type CONF = conf_st;
pub enum store_st { }
pub type STORE = store_st;
pub enum store_method_st { }
pub type STORE_METHOD = store_method_st;
pub enum ui_st { }
pub type UI = ui_st;
pub enum ui_method_st { }
pub type UI_METHOD = ui_method_st;
pub enum st_ERR_FNS { }
pub type ERR_FNS = st_ERR_FNS;
pub enum engine_st { }
pub type ENGINE = engine_st;
pub enum ssl_st { }
pub type SSL = ssl_st;
pub enum ssl_ctx_st { }
pub type SSL_CTX = ssl_ctx_st;
pub enum comp_method_st { }
pub type COMP_METHOD = comp_method_st;
pub enum X509_POLICY_NODE_st { }
pub type X509_POLICY_NODE = X509_POLICY_NODE_st;
pub enum X509_POLICY_LEVEL_st { }
pub type X509_POLICY_LEVEL = X509_POLICY_LEVEL_st;
pub enum X509_POLICY_TREE_st { }
pub type X509_POLICY_TREE = X509_POLICY_TREE_st;
pub enum X509_POLICY_CACHE_st { }
pub type X509_POLICY_CACHE = X509_POLICY_CACHE_st;
pub enum AUTHORITY_KEYID_st { }
pub type AUTHORITY_KEYID = AUTHORITY_KEYID_st;
pub enum DIST_POINT_st { }
pub type DIST_POINT = DIST_POINT_st;
pub enum ISSUING_DIST_POINT_st { }
pub type ISSUING_DIST_POINT = ISSUING_DIST_POINT_st;
pub enum NAME_CONSTRAINTS_st { }
pub type NAME_CONSTRAINTS = NAME_CONSTRAINTS_st;
pub type CRYPTO_EX_DATA = crypto_ex_data_st;
pub type CRYPTO_EX_new =
    ::std::option::Option<unsafe extern "C" fn(parent:
                                                   *mut ::std::os::raw::c_void,
                                               ptr:
                                                   *mut ::std::os::raw::c_void,
                                               ad: *mut CRYPTO_EX_DATA,
                                               idx: ::std::os::raw::c_int,
                                               argl: ::std::os::raw::c_long,
                                               argp:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type CRYPTO_EX_free =
    ::std::option::Option<unsafe extern "C" fn(parent:
                                                   *mut ::std::os::raw::c_void,
                                               ptr:
                                                   *mut ::std::os::raw::c_void,
                                               ad: *mut CRYPTO_EX_DATA,
                                               idx: ::std::os::raw::c_int,
                                               argl: ::std::os::raw::c_long,
                                               argp:
                                                   *mut ::std::os::raw::c_void)>;
pub type CRYPTO_EX_dup =
    ::std::option::Option<unsafe extern "C" fn(to: *mut CRYPTO_EX_DATA,
                                               from: *mut CRYPTO_EX_DATA,
                                               from_d:
                                                   *mut ::std::os::raw::c_void,
                                               idx: ::std::os::raw::c_int,
                                               argl: ::std::os::raw::c_long,
                                               argp:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub enum ocsp_req_ctx_st { }
pub type OCSP_REQ_CTX = ocsp_req_ctx_st;
pub enum ocsp_response_st { }
pub type OCSP_RESPONSE = ocsp_response_st;
pub enum ocsp_responder_id_st { }
pub type OCSP_RESPID = ocsp_responder_id_st;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stack_st {
    pub num: ::std::os::raw::c_int,
    pub data: *mut *mut ::std::os::raw::c_char,
    pub sorted: ::std::os::raw::c_int,
    pub num_alloc: ::std::os::raw::c_int,
    pub comp: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *const ::std::os::raw::c_void,
                                                         arg2:
                                                             *const ::std::os::raw::c_void)
                                        -> ::std::os::raw::c_int>,
}
impl ::std::default::Default for stack_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _STACK = stack_st;
pub type OPENSSL_STRING = *mut ::std::os::raw::c_char;
pub type OPENSSL_CSTRING = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stack_st_OPENSSL_STRING {
    pub stack: _STACK,
}
impl ::std::default::Default for stack_st_OPENSSL_STRING {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type OPENSSL_BLOCK = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stack_st_OPENSSL_BLOCK {
    pub stack: _STACK,
}
impl ::std::default::Default for stack_st_OPENSSL_BLOCK {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct openssl_item_st {
    pub code: ::std::os::raw::c_int,
    pub value: *mut ::std::os::raw::c_void,
    pub value_size: size_t,
    pub value_length: *mut size_t,
}
impl ::std::default::Default for openssl_item_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type OPENSSL_ITEM = openssl_item_st;
pub enum CRYPTO_dynlock_value { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CRYPTO_dynlock {
    pub references: ::std::os::raw::c_int,
    pub data: *mut CRYPTO_dynlock_value,
}
impl ::std::default::Default for CRYPTO_dynlock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type BIO_dummy = bio_st;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct crypto_ex_data_st {
    pub sk: *mut stack_st_void,
    pub dummy: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for crypto_ex_data_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stack_st_void {
    pub stack: _STACK,
}
impl ::std::default::Default for stack_st_void {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct crypto_ex_data_func_st {
    pub argl: ::std::os::raw::c_long,
    pub argp: *mut ::std::os::raw::c_void,
    pub new_func: CRYPTO_EX_new,
    pub free_func: CRYPTO_EX_free,
    pub dup_func: CRYPTO_EX_dup,
}
impl ::std::default::Default for crypto_ex_data_func_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CRYPTO_EX_DATA_FUNCS = crypto_ex_data_func_st;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stack_st_CRYPTO_EX_DATA_FUNCS {
    pub stack: _STACK,
}
impl ::std::default::Default for stack_st_CRYPTO_EX_DATA_FUNCS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum st_CRYPTO_EX_DATA_IMPL { }
pub type CRYPTO_EX_DATA_IMPL = st_CRYPTO_EX_DATA_IMPL;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct crypto_threadid_st {
    pub ptr: *mut ::std::os::raw::c_void,
    pub val: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for crypto_threadid_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CRYPTO_THREADID = crypto_threadid_st;
pub type CRYPTO_MEM_LEAK_CB =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_ulong,
                                               arg2:
                                                   *const ::std::os::raw::c_char,
                                               arg3: ::std::os::raw::c_int,
                                               arg4: ::std::os::raw::c_int,
                                               arg5:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct bignum_st {
    pub d: *mut ::std::os::raw::c_ulong,
    pub top: ::std::os::raw::c_int,
    pub dmax: ::std::os::raw::c_int,
    pub neg: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
impl ::std::default::Default for bignum_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct bn_mont_ctx_st {
    pub ri: ::std::os::raw::c_int,
    pub RR: BIGNUM,
    pub N: BIGNUM,
    pub Ni: BIGNUM,
    pub n0: [::std::os::raw::c_ulong; 2usize],
    pub flags: ::std::os::raw::c_int,
}
impl ::std::default::Default for bn_mont_ctx_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct bn_recp_ctx_st {
    pub N: BIGNUM,
    pub Nr: BIGNUM,
    pub num_bits: ::std::os::raw::c_int,
    pub shift: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for bn_recp_ctx_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct bn_gencb_st {
    pub ver: ::std::os::raw::c_uint,
    pub arg: *mut ::std::os::raw::c_void,
    pub cb: Union_Unnamed4,
}
impl ::std::default::Default for bn_gencb_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed4 {
    pub unsafe fn cb_1(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             ::std::os::raw::c_int,
                                                         arg2:
                                                             ::std::os::raw::c_int,
                                                         arg3:
                                                             *mut ::std::os::raw::c_void)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cb_2(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             ::std::os::raw::c_int,
                                                         arg2:
                                                             ::std::os::raw::c_int,
                                                         arg3: *mut BN_GENCB)
                                        -> ::std::os::raw::c_int> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type BIO = bio_st;
pub type bio_info_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut bio_st,
                                               arg2: ::std::os::raw::c_int,
                                               arg3:
                                                   *const ::std::os::raw::c_char,
                                               arg4: ::std::os::raw::c_int,
                                               arg5: ::std::os::raw::c_long,
                                               arg6: ::std::os::raw::c_long)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct bio_method_st {
    pub type_: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub bwrite: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub bread: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub bputs: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO,
                                                          arg2:
                                                              *const ::std::os::raw::c_char)
                                         -> ::std::os::raw::c_int>,
    pub bgets: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub ctrl: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO,
                                                         arg2:
                                                             ::std::os::raw::c_int,
                                                         arg3:
                                                             ::std::os::raw::c_long,
                                                         arg4:
                                                             *mut ::std::os::raw::c_void)
                                        -> ::std::os::raw::c_long>,
    pub create: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO)
                                          -> ::std::os::raw::c_int>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BIO)
                                           -> ::std::os::raw::c_int>,
    pub callback_ctrl: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut BIO,
                                                                  arg2:
                                                                      ::std::os::raw::c_int,
                                                                  arg3:
                                                                      bio_info_cb)
                                                 -> ::std::os::raw::c_long>,
}
impl ::std::default::Default for bio_method_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type BIO_METHOD = bio_method_st;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct bio_st {
    pub method: *mut BIO_METHOD,
    pub callback: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut bio_st,
                                                             arg2:
                                                                 ::std::os::raw::c_int,
                                                             arg3:
                                                                 *const ::std::os::raw::c_char,
                                                             arg4:
                                                                 ::std::os::raw::c_int,
                                                             arg5:
                                                                 ::std::os::raw::c_long,
                                                             arg6:
                                                                 ::std::os::raw::c_long)
                                            -> ::std::os::raw::c_long>,
    pub cb_arg: *mut ::std::os::raw::c_char,
    pub init: ::std::os::raw::c_int,
    pub shutdown: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub retry_reason: ::std::os::raw::c_int,
    pub num: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub next_bio: *mut bio_st,
    pub prev_bio: *mut bio_st,
    pub references: ::std::os::raw::c_int,
    pub num_read: ::std::os::raw::c_ulong,
    pub num_write: ::std::os::raw::c_ulong,
    pub ex_data: CRYPTO_EX_DATA,
}
impl ::std::default::Default for bio_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stack_st_BIO {
    pub stack: _STACK,
}
impl ::std::default::Default for stack_st_BIO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct bio_f_buffer_ctx_struct {
    pub ibuf_size: ::std::os::raw::c_int,
    pub obuf_size: ::std::os::raw::c_int,
    pub ibuf: *mut ::std::os::raw::c_char,
    pub ibuf_len: ::std::os::raw::c_int,
    pub ibuf_off: ::std::os::raw::c_int,
    pub obuf: *mut ::std::os::raw::c_char,
    pub obuf_len: ::std::os::raw::c_int,
    pub obuf_off: ::std::os::raw::c_int,
}
impl ::std::default::Default for bio_f_buffer_ctx_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type BIO_F_BUFFER_CTX = bio_f_buffer_ctx_struct;
pub type asn1_ps_func =
    ::std::option::Option<unsafe extern "C" fn(b: *mut BIO,
                                               pbuf:
                                                   *mut *mut ::std::os::raw::c_uchar,
                                               plen:
                                                   *mut ::std::os::raw::c_int,
                                               parg:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub enum hostent { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dh_method {
    pub name: *const ::std::os::raw::c_char,
    pub generate_key: ::std::option::Option<unsafe extern "C" fn(dh: *mut DH)
                                                -> ::std::os::raw::c_int>,
    pub compute_key: ::std::option::Option<unsafe extern "C" fn(key:
                                                                    *mut ::std::os::raw::c_uchar,
                                                                pub_key:
                                                                    *const BIGNUM,
                                                                dh: *mut DH)
                                               -> ::std::os::raw::c_int>,
    pub bn_mod_exp: ::std::option::Option<unsafe extern "C" fn(dh: *const DH,
                                                               r: *mut BIGNUM,
                                                               a:
                                                                   *const BIGNUM,
                                                               p:
                                                                   *const BIGNUM,
                                                               m:
                                                                   *const BIGNUM,
                                                               ctx:
                                                                   *mut BN_CTX,
                                                               m_ctx:
                                                                   *mut BN_MONT_CTX)
                                              -> ::std::os::raw::c_int>,
    pub init: ::std::option::Option<unsafe extern "C" fn(dh: *mut DH)
                                        -> ::std::os::raw::c_int>,
    pub finish: ::std::option::Option<unsafe extern "C" fn(dh: *mut DH)
                                          -> ::std::os::raw::c_int>,
    pub flags: ::std::os::raw::c_int,
    pub app_data: *mut ::std::os::raw::c_char,
    pub generate_params: ::std::option::Option<unsafe extern "C" fn(dh:
                                                                        *mut DH,
                                                                    prime_len:
                                                                        ::std::os::raw::c_int,
                                                                    generator:
                                                                        ::std::os::raw::c_int,
                                                                    cb:
                                                                        *mut BN_GENCB)
                                                   -> ::std::os::raw::c_int>,
}
impl ::std::default::Default for dh_method {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dh_st {
    pub pad: ::std::os::raw::c_int,
    pub version: ::std::os::raw::c_int,
    pub p: *mut BIGNUM,
    pub g: *mut BIGNUM,
    pub length: ::std::os::raw::c_long,
    pub pub_key: *mut BIGNUM,
    pub priv_key: *mut BIGNUM,
    pub flags: ::std::os::raw::c_int,
    pub method_mont_p: *mut BN_MONT_CTX,
    pub q: *mut BIGNUM,
    pub j: *mut BIGNUM,
    pub seed: *mut ::std::os::raw::c_uchar,
    pub seedlen: ::std::os::raw::c_int,
    pub counter: *mut BIGNUM,
    pub references: ::std::os::raw::c_int,
    pub ex_data: CRYPTO_EX_DATA,
    pub meth: *const DH_METHOD,
    pub engine: *mut ENGINE,
}
impl ::std::default::Default for dh_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MP_t = *mut BIGNUM;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum RTMP_LogLevel {
    RTMP_LOGCRIT = 0,
    RTMP_LOGERROR = 1,
    RTMP_LOGWARNING = 2,
    RTMP_LOGINFO = 3,
    RTMP_LOGDEBUG = 4,
    RTMP_LOGDEBUG2 = 5,
    RTMP_LOGALL = 6,
}
pub type RTMP_LogCallback =
    ::std::option::Option<unsafe extern "C" fn(level: ::std::os::raw::c_int,
                                               fmt:
                                                   *const ::std::os::raw::c_char,
                                               arg1: va_list)>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut RTMP_debuglevel: RTMP_LogLevel;
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> f64;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __assert_fail(__assertion: *const ::std::os::raw::c_char,
                         __file: *const ::std::os::raw::c_char,
                         __line: ::std::os::raw::c_uint,
                         __function: *const ::std::os::raw::c_char);
    pub fn __assert_perror_fail(__errnum: ::std::os::raw::c_int,
                                __file: *const ::std::os::raw::c_char,
                                __line: ::std::os::raw::c_uint,
                                __function: *const ::std::os::raw::c_char);
    pub fn __assert(__assertion: *const ::std::os::raw::c_char,
                    __file: *const ::std::os::raw::c_char,
                    __line: ::std::os::raw::c_int);
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn sk_num(arg1: *const _STACK) -> ::std::os::raw::c_int;
    pub fn sk_value(arg1: *const _STACK, arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn sk_set(arg1: *mut _STACK, arg2: ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn sk_new(cmp:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *const ::std::os::raw::c_void,
                                                                 arg2:
                                                                     *const ::std::os::raw::c_void)
                                                -> ::std::os::raw::c_int>)
     -> *mut _STACK;
    pub fn sk_new_null() -> *mut _STACK;
    pub fn sk_free(arg1: *mut _STACK);
    pub fn sk_pop_free(st: *mut _STACK,
                       func:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut ::std::os::raw::c_void)>);
    pub fn sk_deep_copy(arg1: *mut _STACK,
                        arg2:
                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut ::std::os::raw::c_void)
                                                      ->
                                                          *mut ::std::os::raw::c_void>,
                        arg3:
                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut ::std::os::raw::c_void)>)
     -> *mut _STACK;
    pub fn sk_insert(sk: *mut _STACK, data: *mut ::std::os::raw::c_void,
                     where_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sk_delete(st: *mut _STACK, loc: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn sk_delete_ptr(st: *mut _STACK, p: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn sk_find(st: *mut _STACK, data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sk_find_ex(st: *mut _STACK, data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sk_push(st: *mut _STACK, data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sk_unshift(st: *mut _STACK, data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sk_shift(st: *mut _STACK) -> *mut ::std::os::raw::c_void;
    pub fn sk_pop(st: *mut _STACK) -> *mut ::std::os::raw::c_void;
    pub fn sk_zero(st: *mut _STACK);
    pub fn sk_set_cmp_func(sk: *mut _STACK,
                           c:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *const ::std::os::raw::c_void,
                                                                          arg2:
                                                                              *const ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>)
     ->
         ::std::option::Option<unsafe extern "C" fn(sk: *mut _STACK,
                                                    c:
                                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                       *const ::std::os::raw::c_void,
                                                                                                   arg2:
                                                                                                       *const ::std::os::raw::c_void)
                                                                                  ->
                                                                                      ::std::os::raw::c_int>)
                                   -> ::std::os::raw::c_int>;
    pub fn sk_dup(st: *mut _STACK) -> *mut _STACK;
    pub fn sk_sort(st: *mut _STACK);
    pub fn sk_is_sorted(st: *const _STACK) -> ::std::os::raw::c_int;
    pub fn CRYPTO_mem_ctrl(mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_is_mem_check_on() -> ::std::os::raw::c_int;
    pub fn SSLeay_version(type_: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn SSLeay() -> ::std::os::raw::c_ulong;
    pub fn OPENSSL_issetugid() -> ::std::os::raw::c_int;
    pub fn CRYPTO_get_ex_data_implementation() -> *const CRYPTO_EX_DATA_IMPL;
    pub fn CRYPTO_set_ex_data_implementation(i: *const CRYPTO_EX_DATA_IMPL)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_ex_data_new_class() -> ::std::os::raw::c_int;
    pub fn CRYPTO_get_ex_new_index(class_index: ::std::os::raw::c_int,
                                   argl: ::std::os::raw::c_long,
                                   argp: *mut ::std::os::raw::c_void,
                                   new_func: CRYPTO_EX_new,
                                   dup_func: CRYPTO_EX_dup,
                                   free_func: CRYPTO_EX_free)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_new_ex_data(class_index: ::std::os::raw::c_int,
                              obj: *mut ::std::os::raw::c_void,
                              ad: *mut CRYPTO_EX_DATA)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_dup_ex_data(class_index: ::std::os::raw::c_int,
                              to: *mut CRYPTO_EX_DATA,
                              from: *mut CRYPTO_EX_DATA)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_free_ex_data(class_index: ::std::os::raw::c_int,
                               obj: *mut ::std::os::raw::c_void,
                               ad: *mut CRYPTO_EX_DATA);
    pub fn CRYPTO_set_ex_data(ad: *mut CRYPTO_EX_DATA,
                              idx: ::std::os::raw::c_int,
                              val: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_get_ex_data(ad: *const CRYPTO_EX_DATA,
                              idx: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn CRYPTO_cleanup_all_ex_data();
    pub fn CRYPTO_get_new_lockid(name: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_num_locks() -> ::std::os::raw::c_int;
    pub fn CRYPTO_lock(mode: ::std::os::raw::c_int,
                       type_: ::std::os::raw::c_int,
                       file: *const ::std::os::raw::c_char,
                       line: ::std::os::raw::c_int);
    pub fn CRYPTO_set_locking_callback(func:
                                           ::std::option::Option<unsafe extern "C" fn(mode:
                                                                                          ::std::os::raw::c_int,
                                                                                      type_:
                                                                                          ::std::os::raw::c_int,
                                                                                      file:
                                                                                          *const ::std::os::raw::c_char,
                                                                                      line:
                                                                                          ::std::os::raw::c_int)>);
    pub fn CRYPTO_get_locking_callback()
     -> ::std::option::Option<extern "C" fn()>;
    pub fn CRYPTO_set_add_lock_callback(func:
                                            ::std::option::Option<unsafe extern "C" fn(num:
                                                                                           *mut ::std::os::raw::c_int,
                                                                                       mount:
                                                                                           ::std::os::raw::c_int,
                                                                                       type_:
                                                                                           ::std::os::raw::c_int,
                                                                                       file:
                                                                                           *const ::std::os::raw::c_char,
                                                                                       line:
                                                                                           ::std::os::raw::c_int)
                                                                      ->
                                                                          ::std::os::raw::c_int>);
    pub fn CRYPTO_get_add_lock_callback()
     -> ::std::option::Option<extern "C" fn() -> ::std::os::raw::c_int>;
    pub fn CRYPTO_THREADID_set_numeric(id: *mut CRYPTO_THREADID,
                                       val: ::std::os::raw::c_ulong);
    pub fn CRYPTO_THREADID_set_pointer(id: *mut CRYPTO_THREADID,
                                       ptr: *mut ::std::os::raw::c_void);
    pub fn CRYPTO_THREADID_set_callback(threadid_func:
                                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           *mut CRYPTO_THREADID)>)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_THREADID_get_callback()
     -> ::std::option::Option<extern "C" fn()>;
    pub fn CRYPTO_THREADID_current(id: *mut CRYPTO_THREADID);
    pub fn CRYPTO_THREADID_cmp(a: *const CRYPTO_THREADID,
                               b: *const CRYPTO_THREADID)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_THREADID_cpy(dest: *mut CRYPTO_THREADID,
                               src: *const CRYPTO_THREADID);
    pub fn CRYPTO_THREADID_hash(id: *const CRYPTO_THREADID)
     -> ::std::os::raw::c_ulong;
    pub fn CRYPTO_set_id_callback(func:
                                      ::std::option::Option<extern "C" fn()
                                                                ->
                                                                    ::std::os::raw::c_ulong>);
    pub fn CRYPTO_get_id_callback()
     -> ::std::option::Option<extern "C" fn() -> ::std::os::raw::c_ulong>;
    pub fn CRYPTO_thread_id() -> ::std::os::raw::c_ulong;
    pub fn CRYPTO_get_lock_name(type_: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn CRYPTO_add_lock(pointer: *mut ::std::os::raw::c_int,
                           amount: ::std::os::raw::c_int,
                           type_: ::std::os::raw::c_int,
                           file: *const ::std::os::raw::c_char,
                           line: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_get_new_dynlockid() -> ::std::os::raw::c_int;
    pub fn CRYPTO_destroy_dynlockid(i: ::std::os::raw::c_int);
    pub fn CRYPTO_get_dynlock_value(i: ::std::os::raw::c_int)
     -> *mut CRYPTO_dynlock_value;
    pub fn CRYPTO_set_dynlock_create_callback(dyn_create_function:
                                                  ::std::option::Option<unsafe extern "C" fn(file:
                                                                                                 *const ::std::os::raw::c_char,
                                                                                             line:
                                                                                                 ::std::os::raw::c_int)
                                                                            ->
                                                                                *mut CRYPTO_dynlock_value>);
    pub fn CRYPTO_set_dynlock_lock_callback(dyn_lock_function:
                                                ::std::option::Option<unsafe extern "C" fn(mode:
                                                                                               ::std::os::raw::c_int,
                                                                                           l:
                                                                                               *mut CRYPTO_dynlock_value,
                                                                                           file:
                                                                                               *const ::std::os::raw::c_char,
                                                                                           line:
                                                                                               ::std::os::raw::c_int)>);
    pub fn CRYPTO_set_dynlock_destroy_callback(dyn_destroy_function:
                                                   ::std::option::Option<unsafe extern "C" fn(l:
                                                                                                  *mut CRYPTO_dynlock_value,
                                                                                              file:
                                                                                                  *const ::std::os::raw::c_char,
                                                                                              line:
                                                                                                  ::std::os::raw::c_int)>);
    pub fn CRYPTO_get_dynlock_create_callback()
     -> ::std::option::Option<extern "C" fn() -> *mut CRYPTO_dynlock_value>;
    pub fn CRYPTO_get_dynlock_lock_callback()
     -> ::std::option::Option<extern "C" fn()>;
    pub fn CRYPTO_get_dynlock_destroy_callback()
     -> ::std::option::Option<extern "C" fn()>;
    pub fn CRYPTO_set_mem_functions(m:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                size_t)
                                                                  ->
                                                                      *mut ::std::os::raw::c_void>,
                                    r:
                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut ::std::os::raw::c_void,
                                                                                   arg2:
                                                                                       size_t)
                                                                  ->
                                                                      *mut ::std::os::raw::c_void>,
                                    f:
                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_set_locked_mem_functions(m:
                                               ::std::option::Option<extern "C" fn(arg1:
                                                                                       size_t)
                                                                         ->
                                                                             *mut ::std::os::raw::c_void>,
                                           free_func:
                                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                              *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_set_mem_ex_functions(m:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          size_t,
                                                                                      arg2:
                                                                                          *const ::std::os::raw::c_char,
                                                                                      arg3:
                                                                                          ::std::os::raw::c_int)
                                                                     ->
                                                                         *mut ::std::os::raw::c_void>,
                                       r:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut ::std::os::raw::c_void,
                                                                                      arg2:
                                                                                          size_t,
                                                                                      arg3:
                                                                                          *const ::std::os::raw::c_char,
                                                                                      arg4:
                                                                                          ::std::os::raw::c_int)
                                                                     ->
                                                                         *mut ::std::os::raw::c_void>,
                                       f:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_set_locked_mem_ex_functions(m:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 size_t,
                                                                                             arg2:
                                                                                                 *const ::std::os::raw::c_char,
                                                                                             arg3:
                                                                                                 ::std::os::raw::c_int)
                                                                            ->
                                                                                *mut ::std::os::raw::c_void>,
                                              free_func:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_set_mem_debug_functions(m:
                                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                             *mut ::std::os::raw::c_void,
                                                                                         arg2:
                                                                                             ::std::os::raw::c_int,
                                                                                         arg3:
                                                                                             *const ::std::os::raw::c_char,
                                                                                         arg4:
                                                                                             ::std::os::raw::c_int,
                                                                                         arg5:
                                                                                             ::std::os::raw::c_int)>,
                                          r:
                                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                             *mut ::std::os::raw::c_void,
                                                                                         arg2:
                                                                                             *mut ::std::os::raw::c_void,
                                                                                         arg3:
                                                                                             ::std::os::raw::c_int,
                                                                                         arg4:
                                                                                             *const ::std::os::raw::c_char,
                                                                                         arg5:
                                                                                             ::std::os::raw::c_int,
                                                                                         arg6:
                                                                                             ::std::os::raw::c_int)>,
                                          f:
                                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                             *mut ::std::os::raw::c_void,
                                                                                         arg2:
                                                                                             ::std::os::raw::c_int)>,
                                          so:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      ::std::os::raw::c_long)>,
                                          go:
                                              ::std::option::Option<extern "C" fn()
                                                                        ->
                                                                            ::std::os::raw::c_long>)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_get_mem_functions(m:
                                        *mut ::std::option::Option<extern "C" fn(arg1:
                                                                                     size_t)
                                                                       ->
                                                                           *mut ::std::os::raw::c_void>,
                                    r:
                                        *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut ::std::os::raw::c_void,
                                                                                        arg2:
                                                                                            size_t)
                                                                       ->
                                                                           *mut ::std::os::raw::c_void>,
                                    f:
                                        *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut ::std::os::raw::c_void)>);
    pub fn CRYPTO_get_locked_mem_functions(m:
                                               *mut ::std::option::Option<extern "C" fn(arg1:
                                                                                            size_t)
                                                                              ->
                                                                                  *mut ::std::os::raw::c_void>,
                                           f:
                                               *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                   *mut ::std::os::raw::c_void)>);
    pub fn CRYPTO_get_mem_ex_functions(m:
                                           *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                               size_t,
                                                                                           arg2:
                                                                                               *const ::std::os::raw::c_char,
                                                                                           arg3:
                                                                                               ::std::os::raw::c_int)
                                                                          ->
                                                                              *mut ::std::os::raw::c_void>,
                                       r:
                                           *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                               *mut ::std::os::raw::c_void,
                                                                                           arg2:
                                                                                               size_t,
                                                                                           arg3:
                                                                                               *const ::std::os::raw::c_char,
                                                                                           arg4:
                                                                                               ::std::os::raw::c_int)
                                                                          ->
                                                                              *mut ::std::os::raw::c_void>,
                                       f:
                                           *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                               *mut ::std::os::raw::c_void)>);
    pub fn CRYPTO_get_locked_mem_ex_functions(m:
                                                  *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                      size_t,
                                                                                                  arg2:
                                                                                                      *const ::std::os::raw::c_char,
                                                                                                  arg3:
                                                                                                      ::std::os::raw::c_int)
                                                                                 ->
                                                                                     *mut ::std::os::raw::c_void>,
                                              f:
                                                  *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                      *mut ::std::os::raw::c_void)>);
    pub fn CRYPTO_get_mem_debug_functions(m:
                                              *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *mut ::std::os::raw::c_void,
                                                                                              arg2:
                                                                                                  ::std::os::raw::c_int,
                                                                                              arg3:
                                                                                                  *const ::std::os::raw::c_char,
                                                                                              arg4:
                                                                                                  ::std::os::raw::c_int,
                                                                                              arg5:
                                                                                                  ::std::os::raw::c_int)>,
                                          r:
                                              *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *mut ::std::os::raw::c_void,
                                                                                              arg2:
                                                                                                  *mut ::std::os::raw::c_void,
                                                                                              arg3:
                                                                                                  ::std::os::raw::c_int,
                                                                                              arg4:
                                                                                                  *const ::std::os::raw::c_char,
                                                                                              arg5:
                                                                                                  ::std::os::raw::c_int,
                                                                                              arg6:
                                                                                                  ::std::os::raw::c_int)>,
                                          f:
                                              *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *mut ::std::os::raw::c_void,
                                                                                              arg2:
                                                                                                  ::std::os::raw::c_int)>,
                                          so:
                                              *mut ::std::option::Option<extern "C" fn(arg1:
                                                                                           ::std::os::raw::c_long)>,
                                          go:
                                              *mut ::std::option::Option<extern "C" fn()
                                                                             ->
                                                                                 ::std::os::raw::c_long>);
    pub fn CRYPTO_malloc_locked(num: ::std::os::raw::c_int,
                                file: *const ::std::os::raw::c_char,
                                line: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn CRYPTO_free_locked(ptr: *mut ::std::os::raw::c_void);
    pub fn CRYPTO_malloc(num: ::std::os::raw::c_int,
                         file: *const ::std::os::raw::c_char,
                         line: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn CRYPTO_strdup(str: *const ::std::os::raw::c_char,
                         file: *const ::std::os::raw::c_char,
                         line: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn CRYPTO_free(ptr: *mut ::std::os::raw::c_void);
    pub fn CRYPTO_realloc(addr: *mut ::std::os::raw::c_void,
                          num: ::std::os::raw::c_int,
                          file: *const ::std::os::raw::c_char,
                          line: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn CRYPTO_realloc_clean(addr: *mut ::std::os::raw::c_void,
                                old_num: ::std::os::raw::c_int,
                                num: ::std::os::raw::c_int,
                                file: *const ::std::os::raw::c_char,
                                line: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn CRYPTO_remalloc(addr: *mut ::std::os::raw::c_void,
                           num: ::std::os::raw::c_int,
                           file: *const ::std::os::raw::c_char,
                           line: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn OPENSSL_cleanse(ptr: *mut ::std::os::raw::c_void, len: size_t);
    pub fn CRYPTO_set_mem_debug_options(bits: ::std::os::raw::c_long);
    pub fn CRYPTO_get_mem_debug_options() -> ::std::os::raw::c_long;
    pub fn CRYPTO_push_info_(info: *const ::std::os::raw::c_char,
                             file: *const ::std::os::raw::c_char,
                             line: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn CRYPTO_pop_info() -> ::std::os::raw::c_int;
    pub fn CRYPTO_remove_all_info() -> ::std::os::raw::c_int;
    pub fn CRYPTO_dbg_malloc(addr: *mut ::std::os::raw::c_void,
                             num: ::std::os::raw::c_int,
                             file: *const ::std::os::raw::c_char,
                             line: ::std::os::raw::c_int,
                             before_p: ::std::os::raw::c_int);
    pub fn CRYPTO_dbg_realloc(addr1: *mut ::std::os::raw::c_void,
                              addr2: *mut ::std::os::raw::c_void,
                              num: ::std::os::raw::c_int,
                              file: *const ::std::os::raw::c_char,
                              line: ::std::os::raw::c_int,
                              before_p: ::std::os::raw::c_int);
    pub fn CRYPTO_dbg_free(addr: *mut ::std::os::raw::c_void,
                           before_p: ::std::os::raw::c_int);
    pub fn CRYPTO_dbg_set_options(bits: ::std::os::raw::c_long);
    pub fn CRYPTO_dbg_get_options() -> ::std::os::raw::c_long;
    pub fn CRYPTO_mem_leaks_fp(arg1: *mut FILE);
    pub fn CRYPTO_mem_leaks(bio: *mut bio_st);
    pub fn CRYPTO_mem_leaks_cb(cb: CRYPTO_MEM_LEAK_CB);
    pub fn OpenSSLDie(file: *const ::std::os::raw::c_char,
                      line: ::std::os::raw::c_int,
                      assertion: *const ::std::os::raw::c_char);
    pub fn OPENSSL_ia32cap_loc() -> *mut ::std::os::raw::c_ulong;
    pub fn OPENSSL_isservice() -> ::std::os::raw::c_int;
    pub fn FIPS_mode() -> ::std::os::raw::c_int;
    pub fn FIPS_mode_set(r: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn OPENSSL_init();
    pub fn CRYPTO_memcmp(a: *const ::std::os::raw::c_void,
                         b: *const ::std::os::raw::c_void, len: size_t)
     -> ::std::os::raw::c_int;
    pub fn ERR_load_CRYPTO_strings();
    pub fn BN_GENCB_call(cb: *mut BN_GENCB, a: ::std::os::raw::c_int,
                         b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BN_value_one() -> *const BIGNUM;
    pub fn BN_options() -> *mut ::std::os::raw::c_char;
    pub fn BN_CTX_new() -> *mut BN_CTX;
    pub fn BN_CTX_init(c: *mut BN_CTX);
    pub fn BN_CTX_free(c: *mut BN_CTX);
    pub fn BN_CTX_start(ctx: *mut BN_CTX);
    pub fn BN_CTX_get(ctx: *mut BN_CTX) -> *mut BIGNUM;
    pub fn BN_CTX_end(ctx: *mut BN_CTX);
    pub fn BN_rand(rnd: *mut BIGNUM, bits: ::std::os::raw::c_int,
                   top: ::std::os::raw::c_int, bottom: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_pseudo_rand(rnd: *mut BIGNUM, bits: ::std::os::raw::c_int,
                          top: ::std::os::raw::c_int,
                          bottom: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_rand_range(rnd: *mut BIGNUM, range: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_pseudo_rand_range(rnd: *mut BIGNUM, range: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_num_bits(a: *const BIGNUM) -> ::std::os::raw::c_int;
    pub fn BN_num_bits_word(arg1: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn BN_new() -> *mut BIGNUM;
    pub fn BN_init(arg1: *mut BIGNUM);
    pub fn BN_clear_free(a: *mut BIGNUM);
    pub fn BN_copy(a: *mut BIGNUM, b: *const BIGNUM) -> *mut BIGNUM;
    pub fn BN_swap(a: *mut BIGNUM, b: *mut BIGNUM);
    pub fn BN_bin2bn(s: *const ::std::os::raw::c_uchar,
                     len: ::std::os::raw::c_int, ret: *mut BIGNUM)
     -> *mut BIGNUM;
    pub fn BN_bn2bin(a: *const BIGNUM, to: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    pub fn BN_mpi2bn(s: *const ::std::os::raw::c_uchar,
                     len: ::std::os::raw::c_int, ret: *mut BIGNUM)
     -> *mut BIGNUM;
    pub fn BN_bn2mpi(a: *const BIGNUM, to: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    pub fn BN_sub(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_usub(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_uadd(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_add(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_mul(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM,
                  ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_sqr(r: *mut BIGNUM, a: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_set_negative(b: *mut BIGNUM, n: ::std::os::raw::c_int);
    pub fn BN_div(dv: *mut BIGNUM, rem: *mut BIGNUM, m: *const BIGNUM,
                  d: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_nnmod(r: *mut BIGNUM, m: *const BIGNUM, d: *const BIGNUM,
                    ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mod_add(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM,
                      m: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_add_quick(r: *mut BIGNUM, a: *const BIGNUM,
                            b: *const BIGNUM, m: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_sub(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM,
                      m: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_sub_quick(r: *mut BIGNUM, a: *const BIGNUM,
                            b: *const BIGNUM, m: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_mul(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM,
                      m: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_sqr(r: *mut BIGNUM, a: *const BIGNUM, m: *const BIGNUM,
                      ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mod_lshift1(r: *mut BIGNUM, a: *const BIGNUM, m: *const BIGNUM,
                          ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mod_lshift1_quick(r: *mut BIGNUM, a: *const BIGNUM,
                                m: *const BIGNUM) -> ::std::os::raw::c_int;
    pub fn BN_mod_lshift(r: *mut BIGNUM, a: *const BIGNUM,
                         n: ::std::os::raw::c_int, m: *const BIGNUM,
                         ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mod_lshift_quick(r: *mut BIGNUM, a: *const BIGNUM,
                               n: ::std::os::raw::c_int, m: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_word(a: *const BIGNUM, w: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
    pub fn BN_div_word(a: *mut BIGNUM, w: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
    pub fn BN_mul_word(a: *mut BIGNUM, w: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn BN_add_word(a: *mut BIGNUM, w: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn BN_sub_word(a: *mut BIGNUM, w: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn BN_set_word(a: *mut BIGNUM, w: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn BN_get_word(a: *const BIGNUM) -> ::std::os::raw::c_ulong;
    pub fn BN_cmp(a: *const BIGNUM, b: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_free(a: *mut BIGNUM);
    pub fn BN_is_bit_set(a: *const BIGNUM, n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_lshift(r: *mut BIGNUM, a: *const BIGNUM,
                     n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BN_lshift1(r: *mut BIGNUM, a: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_exp(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                  ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mod_exp(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                      m: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_exp_mont(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                           m: *const BIGNUM, ctx: *mut BN_CTX,
                           m_ctx: *mut BN_MONT_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mod_exp_mont_consttime(rr: *mut BIGNUM, a: *const BIGNUM,
                                     p: *const BIGNUM, m: *const BIGNUM,
                                     ctx: *mut BN_CTX,
                                     in_mont: *mut BN_MONT_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_exp_mont_word(r: *mut BIGNUM, a: ::std::os::raw::c_ulong,
                                p: *const BIGNUM, m: *const BIGNUM,
                                ctx: *mut BN_CTX, m_ctx: *mut BN_MONT_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_exp2_mont(r: *mut BIGNUM, a1: *const BIGNUM,
                            p1: *const BIGNUM, a2: *const BIGNUM,
                            p2: *const BIGNUM, m: *const BIGNUM,
                            ctx: *mut BN_CTX, m_ctx: *mut BN_MONT_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_exp_simple(r: *mut BIGNUM, a: *const BIGNUM,
                             p: *const BIGNUM, m: *const BIGNUM,
                             ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mask_bits(a: *mut BIGNUM, n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_print_fp(fp: *mut FILE, a: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_print(fp: *mut ::std::os::raw::c_void, a: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_reciprocal(r: *mut BIGNUM, m: *const BIGNUM,
                         len: ::std::os::raw::c_int, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_rshift(r: *mut BIGNUM, a: *const BIGNUM,
                     n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BN_rshift1(r: *mut BIGNUM, a: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_clear(a: *mut BIGNUM);
    pub fn BN_dup(a: *const BIGNUM) -> *mut BIGNUM;
    pub fn BN_ucmp(a: *const BIGNUM, b: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_set_bit(a: *mut BIGNUM, n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_clear_bit(a: *mut BIGNUM, n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_bn2hex(a: *const BIGNUM) -> *mut ::std::os::raw::c_char;
    pub fn BN_bn2dec(a: *const BIGNUM) -> *mut ::std::os::raw::c_char;
    pub fn BN_hex2bn(a: *mut *mut BIGNUM, str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn BN_dec2bn(a: *mut *mut BIGNUM, str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn BN_asc2bn(a: *mut *mut BIGNUM, str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn BN_gcd(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM,
                  ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_kronecker(a: *const BIGNUM, b: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_mod_inverse(ret: *mut BIGNUM, a: *const BIGNUM,
                          n: *const BIGNUM, ctx: *mut BN_CTX) -> *mut BIGNUM;
    pub fn BN_mod_sqrt(ret: *mut BIGNUM, a: *const BIGNUM, n: *const BIGNUM,
                       ctx: *mut BN_CTX) -> *mut BIGNUM;
    pub fn BN_consttime_swap(swap: ::std::os::raw::c_ulong, a: *mut BIGNUM,
                             b: *mut BIGNUM, nwords: ::std::os::raw::c_int);
    pub fn BN_generate_prime(ret: *mut BIGNUM, bits: ::std::os::raw::c_int,
                             safe: ::std::os::raw::c_int, add: *const BIGNUM,
                             rem: *const BIGNUM,
                             callback:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                ::std::os::raw::c_int,
                                                                            arg2:
                                                                                ::std::os::raw::c_int,
                                                                            arg3:
                                                                                *mut ::std::os::raw::c_void)>,
                             cb_arg: *mut ::std::os::raw::c_void)
     -> *mut BIGNUM;
    pub fn BN_is_prime(p: *const BIGNUM, nchecks: ::std::os::raw::c_int,
                       callback:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          ::std::os::raw::c_int,
                                                                      arg2:
                                                                          ::std::os::raw::c_int,
                                                                      arg3:
                                                                          *mut ::std::os::raw::c_void)>,
                       ctx: *mut BN_CTX, cb_arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn BN_is_prime_fasttest(p: *const BIGNUM,
                                nchecks: ::std::os::raw::c_int,
                                callback:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   ::std::os::raw::c_int,
                                                                               arg2:
                                                                                   ::std::os::raw::c_int,
                                                                               arg3:
                                                                                   *mut ::std::os::raw::c_void)>,
                                ctx: *mut BN_CTX,
                                cb_arg: *mut ::std::os::raw::c_void,
                                do_trial_division: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_generate_prime_ex(ret: *mut BIGNUM, bits: ::std::os::raw::c_int,
                                safe: ::std::os::raw::c_int,
                                add: *const BIGNUM, rem: *const BIGNUM,
                                cb: *mut BN_GENCB) -> ::std::os::raw::c_int;
    pub fn BN_is_prime_ex(p: *const BIGNUM, nchecks: ::std::os::raw::c_int,
                          ctx: *mut BN_CTX, cb: *mut BN_GENCB)
     -> ::std::os::raw::c_int;
    pub fn BN_is_prime_fasttest_ex(p: *const BIGNUM,
                                   nchecks: ::std::os::raw::c_int,
                                   ctx: *mut BN_CTX,
                                   do_trial_division: ::std::os::raw::c_int,
                                   cb: *mut BN_GENCB)
     -> ::std::os::raw::c_int;
    pub fn BN_X931_generate_Xpq(Xp: *mut BIGNUM, Xq: *mut BIGNUM,
                                nbits: ::std::os::raw::c_int,
                                ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_X931_derive_prime_ex(p: *mut BIGNUM, p1: *mut BIGNUM,
                                   p2: *mut BIGNUM, Xp: *const BIGNUM,
                                   Xp1: *const BIGNUM, Xp2: *const BIGNUM,
                                   e: *const BIGNUM, ctx: *mut BN_CTX,
                                   cb: *mut BN_GENCB)
     -> ::std::os::raw::c_int;
    pub fn BN_X931_generate_prime_ex(p: *mut BIGNUM, p1: *mut BIGNUM,
                                     p2: *mut BIGNUM, Xp1: *mut BIGNUM,
                                     Xp2: *mut BIGNUM, Xp: *const BIGNUM,
                                     e: *const BIGNUM, ctx: *mut BN_CTX,
                                     cb: *mut BN_GENCB)
     -> ::std::os::raw::c_int;
    pub fn BN_MONT_CTX_new() -> *mut BN_MONT_CTX;
    pub fn BN_MONT_CTX_init(ctx: *mut BN_MONT_CTX);
    pub fn BN_mod_mul_montgomery(r: *mut BIGNUM, a: *const BIGNUM,
                                 b: *const BIGNUM, mont: *mut BN_MONT_CTX,
                                 ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_from_montgomery(r: *mut BIGNUM, a: *const BIGNUM,
                              mont: *mut BN_MONT_CTX, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_MONT_CTX_free(mont: *mut BN_MONT_CTX);
    pub fn BN_MONT_CTX_set(mont: *mut BN_MONT_CTX, mod_: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_MONT_CTX_copy(to: *mut BN_MONT_CTX, from: *mut BN_MONT_CTX)
     -> *mut BN_MONT_CTX;
    pub fn BN_MONT_CTX_set_locked(pmont: *mut *mut BN_MONT_CTX,
                                  lock: ::std::os::raw::c_int,
                                  mod_: *const BIGNUM, ctx: *mut BN_CTX)
     -> *mut BN_MONT_CTX;
    pub fn BN_BLINDING_new(A: *const BIGNUM, Ai: *const BIGNUM,
                           mod_: *mut BIGNUM) -> *mut BN_BLINDING;
    pub fn BN_BLINDING_free(b: *mut BN_BLINDING);
    pub fn BN_BLINDING_update(b: *mut BN_BLINDING, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_BLINDING_convert(n: *mut BIGNUM, b: *mut BN_BLINDING,
                               ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_BLINDING_invert(n: *mut BIGNUM, b: *mut BN_BLINDING,
                              ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_BLINDING_convert_ex(n: *mut BIGNUM, r: *mut BIGNUM,
                                  b: *mut BN_BLINDING, arg1: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_BLINDING_invert_ex(n: *mut BIGNUM, r: *const BIGNUM,
                                 b: *mut BN_BLINDING, arg1: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_BLINDING_get_thread_id(arg1: *const BN_BLINDING)
     -> ::std::os::raw::c_ulong;
    pub fn BN_BLINDING_set_thread_id(arg1: *mut BN_BLINDING,
                                     arg2: ::std::os::raw::c_ulong);
    pub fn BN_BLINDING_thread_id(arg1: *mut BN_BLINDING)
     -> *mut CRYPTO_THREADID;
    pub fn BN_BLINDING_get_flags(arg1: *const BN_BLINDING)
     -> ::std::os::raw::c_ulong;
    pub fn BN_BLINDING_set_flags(arg1: *mut BN_BLINDING,
                                 arg2: ::std::os::raw::c_ulong);
    pub fn BN_BLINDING_create_param(b: *mut BN_BLINDING, e: *const BIGNUM,
                                    m: *mut BIGNUM, ctx: *mut BN_CTX,
                                    bn_mod_exp:
                                        ::std::option::Option<unsafe extern "C" fn(r:
                                                                                       *mut BIGNUM,
                                                                                   a:
                                                                                       *const BIGNUM,
                                                                                   p:
                                                                                       *const BIGNUM,
                                                                                   m:
                                                                                       *const BIGNUM,
                                                                                   ctx:
                                                                                       *mut BN_CTX,
                                                                                   m_ctx:
                                                                                       *mut BN_MONT_CTX)
                                                                  ->
                                                                      ::std::os::raw::c_int>,
                                    m_ctx: *mut BN_MONT_CTX)
     -> *mut BN_BLINDING;
    pub fn BN_set_params(mul: ::std::os::raw::c_int,
                         high: ::std::os::raw::c_int,
                         low: ::std::os::raw::c_int,
                         mont: ::std::os::raw::c_int);
    pub fn BN_get_params(which: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_RECP_CTX_init(recp: *mut BN_RECP_CTX);
    pub fn BN_RECP_CTX_new() -> *mut BN_RECP_CTX;
    pub fn BN_RECP_CTX_free(recp: *mut BN_RECP_CTX);
    pub fn BN_RECP_CTX_set(recp: *mut BN_RECP_CTX, rdiv: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mod_mul_reciprocal(r: *mut BIGNUM, x: *const BIGNUM,
                                 y: *const BIGNUM, recp: *mut BN_RECP_CTX,
                                 ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_mod_exp_recp(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                           m: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_div_recp(dv: *mut BIGNUM, rem: *mut BIGNUM, m: *const BIGNUM,
                       recp: *mut BN_RECP_CTX, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_add(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_mul(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM,
                           p: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_sqr(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_inv(r: *mut BIGNUM, b: *const BIGNUM, p: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_div(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM,
                           p: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_exp(r: *mut BIGNUM, a: *const BIGNUM, b: *const BIGNUM,
                           p: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_sqrt(r: *mut BIGNUM, a: *const BIGNUM,
                            p: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_solve_quad(r: *mut BIGNUM, a: *const BIGNUM,
                                  p: *const BIGNUM, ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_arr(r: *mut BIGNUM, a: *const BIGNUM,
                           p: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_mul_arr(r: *mut BIGNUM, a: *const BIGNUM,
                               b: *const BIGNUM,
                               p: *mut ::std::os::raw::c_int,
                               ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_sqr_arr(r: *mut BIGNUM, a: *const BIGNUM,
                               p: *mut ::std::os::raw::c_int,
                               ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_inv_arr(r: *mut BIGNUM, b: *const BIGNUM,
                               p: *mut ::std::os::raw::c_int,
                               ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_div_arr(r: *mut BIGNUM, a: *const BIGNUM,
                               b: *const BIGNUM,
                               p: *mut ::std::os::raw::c_int,
                               ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_exp_arr(r: *mut BIGNUM, a: *const BIGNUM,
                               b: *const BIGNUM,
                               p: *mut ::std::os::raw::c_int,
                               ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_sqrt_arr(r: *mut BIGNUM, a: *const BIGNUM,
                                p: *mut ::std::os::raw::c_int,
                                ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_GF2m_mod_solve_quad_arr(r: *mut BIGNUM, a: *const BIGNUM,
                                      p: *mut ::std::os::raw::c_int,
                                      ctx: *mut BN_CTX)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_poly2arr(a: *const BIGNUM, p: *mut ::std::os::raw::c_int,
                            max: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BN_GF2m_arr2poly(p: *mut ::std::os::raw::c_int, a: *mut BIGNUM)
     -> ::std::os::raw::c_int;
    pub fn BN_nist_mod_192(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_nist_mod_224(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_nist_mod_256(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_nist_mod_384(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_nist_mod_521(r: *mut BIGNUM, a: *const BIGNUM, p: *const BIGNUM,
                           ctx: *mut BN_CTX) -> ::std::os::raw::c_int;
    pub fn BN_get0_nist_prime_192() -> *const BIGNUM;
    pub fn BN_get0_nist_prime_224() -> *const BIGNUM;
    pub fn BN_get0_nist_prime_256() -> *const BIGNUM;
    pub fn BN_get0_nist_prime_384() -> *const BIGNUM;
    pub fn BN_get0_nist_prime_521() -> *const BIGNUM;
    pub fn bn_expand2(a: *mut BIGNUM, words: ::std::os::raw::c_int)
     -> *mut BIGNUM;
    pub fn bn_dup_expand(a: *const BIGNUM, words: ::std::os::raw::c_int)
     -> *mut BIGNUM;
    pub fn bn_mul_add_words(rp: *mut ::std::os::raw::c_ulong,
                            ap: *const ::std::os::raw::c_ulong,
                            num: ::std::os::raw::c_int,
                            w: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
    pub fn bn_mul_words(rp: *mut ::std::os::raw::c_ulong,
                        ap: *const ::std::os::raw::c_ulong,
                        num: ::std::os::raw::c_int,
                        w: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
    pub fn bn_sqr_words(rp: *mut ::std::os::raw::c_ulong,
                        ap: *const ::std::os::raw::c_ulong,
                        num: ::std::os::raw::c_int);
    pub fn bn_div_words(h: ::std::os::raw::c_ulong,
                        l: ::std::os::raw::c_ulong,
                        d: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
    pub fn bn_add_words(rp: *mut ::std::os::raw::c_ulong,
                        ap: *const ::std::os::raw::c_ulong,
                        bp: *const ::std::os::raw::c_ulong,
                        num: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulong;
    pub fn bn_sub_words(rp: *mut ::std::os::raw::c_ulong,
                        ap: *const ::std::os::raw::c_ulong,
                        bp: *const ::std::os::raw::c_ulong,
                        num: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulong;
    pub fn get_rfc2409_prime_768(bn: *mut BIGNUM) -> *mut BIGNUM;
    pub fn get_rfc2409_prime_1024(bn: *mut BIGNUM) -> *mut BIGNUM;
    pub fn get_rfc3526_prime_1536(bn: *mut BIGNUM) -> *mut BIGNUM;
    pub fn get_rfc3526_prime_2048(bn: *mut BIGNUM) -> *mut BIGNUM;
    pub fn get_rfc3526_prime_3072(bn: *mut BIGNUM) -> *mut BIGNUM;
    pub fn get_rfc3526_prime_4096(bn: *mut BIGNUM) -> *mut BIGNUM;
    pub fn get_rfc3526_prime_6144(bn: *mut BIGNUM) -> *mut BIGNUM;
    pub fn get_rfc3526_prime_8192(bn: *mut BIGNUM) -> *mut BIGNUM;
    pub fn BN_bntest_rand(rnd: *mut BIGNUM, bits: ::std::os::raw::c_int,
                          top: ::std::os::raw::c_int,
                          bottom: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ERR_load_BN_strings();
    pub fn BIO_set_flags(b: *mut BIO, flags: ::std::os::raw::c_int);
    pub fn BIO_test_flags(b: *const BIO, flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_clear_flags(b: *mut BIO, flags: ::std::os::raw::c_int);
    pub fn BIO_get_callback(b: *const BIO)
     ->
         ::std::option::Option<unsafe extern "C" fn(b: *const BIO)
                                   -> ::std::os::raw::c_long>;
    pub fn BIO_set_callback(b: *mut BIO,
                            callback:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut bio_st,
                                                                           arg2:
                                                                               ::std::os::raw::c_int,
                                                                           arg3:
                                                                               *const ::std::os::raw::c_char,
                                                                           arg4:
                                                                               ::std::os::raw::c_int,
                                                                           arg5:
                                                                               ::std::os::raw::c_long,
                                                                           arg6:
                                                                               ::std::os::raw::c_long)
                                                          ->
                                                              ::std::os::raw::c_long>);
    pub fn BIO_get_callback_arg(b: *const BIO) -> *mut ::std::os::raw::c_char;
    pub fn BIO_set_callback_arg(b: *mut BIO,
                                arg: *mut ::std::os::raw::c_char);
    pub fn BIO_method_name(b: *const BIO) -> *const ::std::os::raw::c_char;
    pub fn BIO_method_type(b: *const BIO) -> ::std::os::raw::c_int;
    pub fn BIO_ctrl_pending(b: *mut BIO) -> size_t;
    pub fn BIO_ctrl_wpending(b: *mut BIO) -> size_t;
    pub fn BIO_ctrl_get_write_guarantee(b: *mut BIO) -> size_t;
    pub fn BIO_ctrl_get_read_request(b: *mut BIO) -> size_t;
    pub fn BIO_ctrl_reset_read_request(b: *mut BIO) -> ::std::os::raw::c_int;
    pub fn BIO_set_ex_data(bio: *mut BIO, idx: ::std::os::raw::c_int,
                           data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn BIO_get_ex_data(bio: *mut BIO, idx: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn BIO_get_ex_new_index(argl: ::std::os::raw::c_long,
                                argp: *mut ::std::os::raw::c_void,
                                new_func: CRYPTO_EX_new,
                                dup_func: CRYPTO_EX_dup,
                                free_func: CRYPTO_EX_free)
     -> ::std::os::raw::c_int;
    pub fn BIO_number_read(bio: *mut BIO) -> ::std::os::raw::c_ulong;
    pub fn BIO_number_written(bio: *mut BIO) -> ::std::os::raw::c_ulong;
    pub fn BIO_asn1_set_prefix(b: *mut BIO, prefix: asn1_ps_func,
                               prefix_free: asn1_ps_func)
     -> ::std::os::raw::c_int;
    pub fn BIO_asn1_get_prefix(b: *mut BIO, pprefix: *mut asn1_ps_func,
                               pprefix_free: *mut asn1_ps_func)
     -> ::std::os::raw::c_int;
    pub fn BIO_asn1_set_suffix(b: *mut BIO, suffix: asn1_ps_func,
                               suffix_free: asn1_ps_func)
     -> ::std::os::raw::c_int;
    pub fn BIO_asn1_get_suffix(b: *mut BIO, psuffix: *mut asn1_ps_func,
                               psuffix_free: *mut asn1_ps_func)
     -> ::std::os::raw::c_int;
    pub fn BIO_s_file() -> *mut BIO_METHOD;
    pub fn BIO_new_file(filename: *const ::std::os::raw::c_char,
                        mode: *const ::std::os::raw::c_char) -> *mut BIO;
    pub fn BIO_new_fp(stream: *mut FILE, close_flag: ::std::os::raw::c_int)
     -> *mut BIO;
    pub fn BIO_new(type_: *mut BIO_METHOD) -> *mut BIO;
    pub fn BIO_set(a: *mut BIO, type_: *mut BIO_METHOD)
     -> ::std::os::raw::c_int;
    pub fn BIO_free(a: *mut BIO) -> ::std::os::raw::c_int;
    pub fn BIO_vfree(a: *mut BIO);
    pub fn BIO_read(b: *mut BIO, data: *mut ::std::os::raw::c_void,
                    len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_gets(bp: *mut BIO, buf: *mut ::std::os::raw::c_char,
                    size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_write(b: *mut BIO, data: *const ::std::os::raw::c_void,
                     len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_puts(bp: *mut BIO, buf: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn BIO_indent(b: *mut BIO, indent: ::std::os::raw::c_int,
                      max: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_ctrl(bp: *mut BIO, cmd: ::std::os::raw::c_int,
                    larg: ::std::os::raw::c_long,
                    parg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_long;
    pub fn BIO_callback_ctrl(b: *mut BIO, cmd: ::std::os::raw::c_int,
                             fp:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut bio_st,
                                                                            arg2:
                                                                                ::std::os::raw::c_int,
                                                                            arg3:
                                                                                *const ::std::os::raw::c_char,
                                                                            arg4:
                                                                                ::std::os::raw::c_int,
                                                                            arg5:
                                                                                ::std::os::raw::c_long,
                                                                            arg6:
                                                                                ::std::os::raw::c_long)>)
     -> ::std::os::raw::c_long;
    pub fn BIO_ptr_ctrl(bp: *mut BIO, cmd: ::std::os::raw::c_int,
                        larg: ::std::os::raw::c_long)
     -> *mut ::std::os::raw::c_char;
    pub fn BIO_int_ctrl(bp: *mut BIO, cmd: ::std::os::raw::c_int,
                        larg: ::std::os::raw::c_long,
                        iarg: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
    pub fn BIO_push(b: *mut BIO, append: *mut BIO) -> *mut BIO;
    pub fn BIO_pop(b: *mut BIO) -> *mut BIO;
    pub fn BIO_free_all(a: *mut BIO);
    pub fn BIO_find_type(b: *mut BIO, bio_type: ::std::os::raw::c_int)
     -> *mut BIO;
    pub fn BIO_next(b: *mut BIO) -> *mut BIO;
    pub fn BIO_get_retry_BIO(bio: *mut BIO,
                             reason: *mut ::std::os::raw::c_int) -> *mut BIO;
    pub fn BIO_get_retry_reason(bio: *mut BIO) -> ::std::os::raw::c_int;
    pub fn BIO_dup_chain(in_: *mut BIO) -> *mut BIO;
    pub fn BIO_nread0(bio: *mut BIO, buf: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn BIO_nread(bio: *mut BIO, buf: *mut *mut ::std::os::raw::c_char,
                     num: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_nwrite0(bio: *mut BIO, buf: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn BIO_nwrite(bio: *mut BIO, buf: *mut *mut ::std::os::raw::c_char,
                      num: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_debug_callback(bio: *mut BIO, cmd: ::std::os::raw::c_int,
                              argp: *const ::std::os::raw::c_char,
                              argi: ::std::os::raw::c_int,
                              argl: ::std::os::raw::c_long,
                              ret: ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
    pub fn BIO_s_mem() -> *mut BIO_METHOD;
    pub fn BIO_new_mem_buf(buf: *const ::std::os::raw::c_void,
                           len: ::std::os::raw::c_int) -> *mut BIO;
    pub fn BIO_s_socket() -> *mut BIO_METHOD;
    pub fn BIO_s_connect() -> *mut BIO_METHOD;
    pub fn BIO_s_accept() -> *mut BIO_METHOD;
    pub fn BIO_s_fd() -> *mut BIO_METHOD;
    pub fn BIO_s_log() -> *mut BIO_METHOD;
    pub fn BIO_s_bio() -> *mut BIO_METHOD;
    pub fn BIO_s_null() -> *mut BIO_METHOD;
    pub fn BIO_f_null() -> *mut BIO_METHOD;
    pub fn BIO_f_buffer() -> *mut BIO_METHOD;
    pub fn BIO_f_nbio_test() -> *mut BIO_METHOD;
    pub fn BIO_s_datagram() -> *mut BIO_METHOD;
    pub fn BIO_sock_should_retry(i: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_sock_non_fatal_error(error: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_dgram_non_fatal_error(error: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_fd_should_retry(i: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_fd_non_fatal_error(error: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_dump_cb(cb:
                           ::std::option::Option<unsafe extern "C" fn(data:
                                                                          *const ::std::os::raw::c_void,
                                                                      len:
                                                                          size_t,
                                                                      u:
                                                                          *mut ::std::os::raw::c_void)
                                                     ->
                                                         ::std::os::raw::c_int>,
                       u: *mut ::std::os::raw::c_void,
                       s: *const ::std::os::raw::c_char,
                       len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_dump_indent_cb(cb:
                                  ::std::option::Option<unsafe extern "C" fn(data:
                                                                                 *const ::std::os::raw::c_void,
                                                                             len:
                                                                                 size_t,
                                                                             u:
                                                                                 *mut ::std::os::raw::c_void)
                                                            ->
                                                                ::std::os::raw::c_int>,
                              u: *mut ::std::os::raw::c_void,
                              s: *const ::std::os::raw::c_char,
                              len: ::std::os::raw::c_int,
                              indent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_dump(b: *mut BIO, bytes: *const ::std::os::raw::c_char,
                    len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_dump_indent(b: *mut BIO, bytes: *const ::std::os::raw::c_char,
                           len: ::std::os::raw::c_int,
                           indent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_dump_fp(fp: *mut FILE, s: *const ::std::os::raw::c_char,
                       len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn BIO_dump_indent_fp(fp: *mut FILE, s: *const ::std::os::raw::c_char,
                              len: ::std::os::raw::c_int,
                              indent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_hex_string(out: *mut BIO, indent: ::std::os::raw::c_int,
                          width: ::std::os::raw::c_int,
                          data: *mut ::std::os::raw::c_uchar,
                          datalen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_gethostbyname(name: *const ::std::os::raw::c_char)
     -> *mut hostent;
    pub fn BIO_sock_error(sock: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_socket_ioctl(fd: ::std::os::raw::c_int,
                            type_: ::std::os::raw::c_long,
                            arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn BIO_socket_nbio(fd: ::std::os::raw::c_int,
                           mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_get_port(str: *const ::std::os::raw::c_char,
                        port_ptr: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_int;
    pub fn BIO_get_host_ip(str: *const ::std::os::raw::c_char,
                           ip: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    pub fn BIO_get_accept_socket(host_port: *mut ::std::os::raw::c_char,
                                 mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_accept(sock: ::std::os::raw::c_int,
                      ip_port: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn BIO_sock_init() -> ::std::os::raw::c_int;
    pub fn BIO_sock_cleanup();
    pub fn BIO_set_tcp_ndelay(sock: ::std::os::raw::c_int,
                              turn_on: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn BIO_new_socket(sock: ::std::os::raw::c_int,
                          close_flag: ::std::os::raw::c_int) -> *mut BIO;
    pub fn BIO_new_dgram(fd: ::std::os::raw::c_int,
                         close_flag: ::std::os::raw::c_int) -> *mut BIO;
    pub fn BIO_new_fd(fd: ::std::os::raw::c_int,
                      close_flag: ::std::os::raw::c_int) -> *mut BIO;
    pub fn BIO_new_connect(host_port: *const ::std::os::raw::c_char)
     -> *mut BIO;
    pub fn BIO_new_accept(host_port: *const ::std::os::raw::c_char)
     -> *mut BIO;
    pub fn BIO_new_bio_pair(bio1: *mut *mut BIO, writebuf1: size_t,
                            bio2: *mut *mut BIO, writebuf2: size_t)
     -> ::std::os::raw::c_int;
    pub fn BIO_copy_next_retry(b: *mut BIO);
    pub fn BIO_printf(bio: *mut BIO,
                      format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn BIO_vprintf(bio: *mut BIO, format: *const ::std::os::raw::c_char,
                       args: va_list) -> ::std::os::raw::c_int;
    pub fn BIO_snprintf(buf: *mut ::std::os::raw::c_char, n: size_t,
                        format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn BIO_vsnprintf(buf: *mut ::std::os::raw::c_char, n: size_t,
                         format: *const ::std::os::raw::c_char, args: va_list)
     -> ::std::os::raw::c_int;
    pub fn ERR_load_BIO_strings();
    pub fn DHparams_dup(arg1: *mut DH) -> *mut DH;
    pub fn DH_OpenSSL() -> *const DH_METHOD;
    pub fn DH_set_default_method(meth: *const DH_METHOD);
    pub fn DH_get_default_method() -> *const DH_METHOD;
    pub fn DH_set_method(dh: *mut DH, meth: *const DH_METHOD)
     -> ::std::os::raw::c_int;
    pub fn DH_new_method(engine: *mut ENGINE) -> *mut DH;
    pub fn DH_new() -> *mut DH;
    pub fn DH_free(dh: *mut DH);
    pub fn DH_up_ref(dh: *mut DH) -> ::std::os::raw::c_int;
    pub fn DH_size(dh: *const DH) -> ::std::os::raw::c_int;
    pub fn DH_get_ex_new_index(argl: ::std::os::raw::c_long,
                               argp: *mut ::std::os::raw::c_void,
                               new_func: CRYPTO_EX_new,
                               dup_func: CRYPTO_EX_dup,
                               free_func: CRYPTO_EX_free)
     -> ::std::os::raw::c_int;
    pub fn DH_set_ex_data(d: *mut DH, idx: ::std::os::raw::c_int,
                          arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn DH_get_ex_data(d: *mut DH, idx: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn DH_generate_parameters(prime_len: ::std::os::raw::c_int,
                                  generator: ::std::os::raw::c_int,
                                  callback:
                                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                     ::std::os::raw::c_int,
                                                                                 arg2:
                                                                                     ::std::os::raw::c_int,
                                                                                 arg3:
                                                                                     *mut ::std::os::raw::c_void)>,
                                  cb_arg: *mut ::std::os::raw::c_void)
     -> *mut DH;
    pub fn DH_generate_parameters_ex(dh: *mut DH,
                                     prime_len: ::std::os::raw::c_int,
                                     generator: ::std::os::raw::c_int,
                                     cb: *mut BN_GENCB)
     -> ::std::os::raw::c_int;
    pub fn DH_check(dh: *const DH, codes: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn DH_check_pub_key(dh: *const DH, pub_key: *const BIGNUM,
                            codes: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn DH_generate_key(dh: *mut DH) -> ::std::os::raw::c_int;
    pub fn DH_compute_key(key: *mut ::std::os::raw::c_uchar,
                          pub_key: *const BIGNUM, dh: *mut DH)
     -> ::std::os::raw::c_int;
    pub fn DH_compute_key_padded(key: *mut ::std::os::raw::c_uchar,
                                 pub_key: *const BIGNUM, dh: *mut DH)
     -> ::std::os::raw::c_int;
    pub fn d2i_DHparams(a: *mut *mut DH,
                        pp: *mut *const ::std::os::raw::c_uchar,
                        length: ::std::os::raw::c_long) -> *mut DH;
    pub fn i2d_DHparams(a: *const DH, pp: *mut *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    pub fn d2i_DHxparams(a: *mut *mut DH,
                         pp: *mut *const ::std::os::raw::c_uchar,
                         length: ::std::os::raw::c_long) -> *mut DH;
    pub fn i2d_DHxparams(a: *const DH, pp: *mut *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    pub fn DHparams_print_fp(fp: *mut FILE, x: *const DH)
     -> ::std::os::raw::c_int;
    pub fn DHparams_print(bp: *mut BIO, x: *const DH)
     -> ::std::os::raw::c_int;
    pub fn DH_get_1024_160() -> *mut DH;
    pub fn DH_get_2048_224() -> *mut DH;
    pub fn DH_get_2048_256() -> *mut DH;
    pub fn DH_KDF_X9_42(out: *mut ::std::os::raw::c_uchar, outlen: size_t,
                        Z: *const ::std::os::raw::c_uchar, Zlen: size_t,
                        key_oid: *mut ASN1_OBJECT,
                        ukm: *const ::std::os::raw::c_uchar, ukmlen: size_t,
                        md: *const EVP_MD) -> ::std::os::raw::c_int;
    pub fn ERR_load_DH_strings();
    pub fn RTMP_LogSetCallback(cb: RTMP_LogCallback);
    pub fn RTMP_LogSetOutput(file: *mut FILE);
    pub fn RTMP_LogPrintf(format: *const ::std::os::raw::c_char, ...);
    pub fn RTMP_LogStatus(format: *const ::std::os::raw::c_char, ...);
    pub fn RTMP_Log(level: ::std::os::raw::c_int,
                    format: *const ::std::os::raw::c_char, ...);
    pub fn RTMP_LogHex(level: ::std::os::raw::c_int, data: *const uint8_t,
                       len: ::std::os::raw::c_ulong);
    pub fn RTMP_LogHexString(level: ::std::os::raw::c_int,
                             data: *const uint8_t,
                             len: ::std::os::raw::c_ulong);
    pub fn RTMP_LogSetLevel(lvl: RTMP_LogLevel);
    pub fn RTMP_LogGetLevel() -> RTMP_LogLevel;
}
